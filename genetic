#! /usr/bin/env node --harmony

var random = require('./src/util/random_inc');
var stringFitness = require('./src/fitness/string_fitness');

var crossover = require('./src/crossover/cut_splice');
var randomProgram = require('./src/lib/random_program');
var instructions = require('./src/lib/instructions');
var interpreter = require('./src/lib/interpreter');
var randomizeArray = require('./src/util/randomize_array');

// Our target output.
var targetOutput = process.argv[2] || 'Hello world.';

// Store the maxScore for the fitness function so we know when to quit.
var maxScore = stringFitness(targetOutput, targetOutput);

// The minimum number of valid programs to generate for each generation.
var minPopulation = 100;

// How many mutations for each program for each generation.
var numMutationsEachGeneration = 10;

var generationCount = 0;

// The current population.
var population = [];

var lastHightestScore = 0;

var numSameGenerations = 0;

/**
 * Generates a random population.
 */
function generatePopulation() {
	while(true) {
		if (population.length > minPopulation) {
			break;
		}
		randomProgram(function(value) {
			scoreAndAddToPopulation(value);
		});
	}
}

/**
 * Scores this population and adds it to our population.
 */
function scoreAndAddToPopulation(program) {
	var output = '';
	try {
		output = interpreter(program);
	} catch(e) {}

	if (output.length) {
		process.stdout.write('.');
		var score = stringFitness(output, targetOutput);
		if (score < 1) {
			return null;
		}
		var record = [program, score, output];
		population.push(record);
		return record;
	}
	return null;
}

/**
 * Finds the parents for the next generation.
 * Removes programs from the current population, and assigns parents to the population as a seed.
 */
function findParents() {
	population = population.sort(function(a, b) {
		return b[1] - a[1];
	});
	population.length = Math.round(minPopulation / 2);

	// If the score remains the same, try to increase mutation count to avoid reaching a local maximum.
	if (lastHightestScore === population[0][1]) {
		numSameGenerations++;
	}

	// Increment the number of generations.
	if (numSameGenerations >= numMutationsEachGeneration) {
		numSameGenerations = 0;
		numMutationsEachGeneration++;
	}
	lastHightestScore = population[0][1];
}

/**
 * Generates children for the current generation using the population as
 * a list of parents. The population is bred in a random order.
 */
function generateChildren() {
	// The pointer to the current pointer.
	var currentParentPointer = 0;

	var childCountPerPair = 0;

	randomizeArray(population);

	while(true) {
		if (population.length > minPopulation) {
			break;
		}

		// Create a child via gene crossover.
		// The first parent can be different depending on the iteration.
		// This will allow us to generate children independently from each other
		// as each crossover method should only return a single child.
		var child;
		var firstParent = population[currentParentPointer][0];
		var secondParent = population[currentParentPointer + 1][0];
		if (childCountPerPair > 0) {
			child = crossover(secondParent, firstParent);
		} else {
			child = crossover(firstParent, secondParent);
		}

		var record = scoreAndAddToPopulation(child);
		if (record) {
			childCountPerPair++;
		}

		// Reset counters if we have two children.
		if (childCountPerPair == 2) {
			childCountPerPair = 0;
			currentParentPointer += 2;
		}
	}
}

/**
 * Mutates the population by iterating over each program, and applying a mutation.
 * We keep the new program as long as it compiles, regardless of how it scores.
 */
function mutatePopulation() {
	for (var i = population.length - 1; i >= 0; i--) {
		var mutation = population[i][0];
		// Mutate based on numMutationsEachGeneration
		for (var j = 0; j < numMutationsEachGeneration; j++) {
			mutation = mutate(mutation);
		}

		// If we get a record that compiles, remove the old one.
		var record = scoreAndAddToPopulation(mutation);
		if (record) {
			population.splice(i, 1);
		}
	}
}

function mutate(program) {
	var decision = Math.random();
	if (decision <= 0.4) {
		// Replace a random instruction.
		var pos = random(0, program.length);
		program = program.substr(0, pos) + instructions.randomInstruction() + program.substr(pos + 1);
	} else if (decision <= 0.8) {
		// Insert a random instruction.
		var pos = random(0, program.length);
		program = program.substr(0, pos) + instructions.randomInstruction() + program.substr(pos);
	} else {
		// Remove a random instruction.
		var pos = random(0, program.length);
		program = program.substr(0, pos) + program.substr(pos + 1);
	}
	return program
}

function runStep() {
	generationCount++;
	findParents();

	console.log('\033[2J');

	// If we've reached our desired finess we're done.
	if (population[0][1] >= maxScore) {
		console.log('Finished in ', generationCount, ' generations. Top program and output:');
		console.log(population[0]);
		return;
	}

	console.log('\033[2J');
	console.log('Generation: ', generationCount, ' Top Score: ', population[0][1], ' Mutations: ', numMutationsEachGeneration);
	console.log('-----------------------------------------------');
	console.log('Top program:', population[0])

	generateChildren();
	mutatePopulation();

	runStep();
}

generatePopulation();
runStep();
