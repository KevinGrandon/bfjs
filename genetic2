#! /usr/bin/env node --harmony

var random = require('./src/util/random_inc');
var stringFitness = require('./src/fitness/string_fitness');

var randomProgram = require('./src/lib/random_program');
var instructions = require('./src/lib/instructions');
var interpreter = require('./src/lib/interpreter');

// Our target output.
var targetOutput = 'Hello world, my name is Kevin!';

// The minimum number of valid programs to generate for each generation.
var minPopulation = 100;

// The number of high scorers to persist across generations.
var numParentsGeneration = 10;

var generationCount = 0;

// The current population.
var population = [];

/**
 * Generates a random population.
 */
function generatePopulation() {
	while(true) {
		if (population.length > minPopulation) {
			break;
		}
		randomProgram(function(value) {
			scoreAndAddToPopulation(value);
		});
	}
}

/**
 * Scores this population and adds it to our population.
 */
function scoreAndAddToPopulation(program) {
	var output = '';
	try {
		output = interpreter(program);
	} catch(e) {}

	if (output.length) {
		process.stdout.write('.');
		var score = stringFitness(output, targetOutput);
		console.log('Score: ' + score, output);
		if (score < 1) {
			return null;
		}
		var record = [program, score, output];
		population.push(record);
		return record;
	}
	return null;
}

/**
 * Sorts the list and generates a new population with only the members we want to keep.
 */
function pruneLowScores() {
	population = population.sort(function(a, b) {
		return a[1] - b[1];
	});
	population.length = numParentsGeneration;
}

function mutateAndFillPopulation() {
	var numMutationsForEach = minPopulation / numParentsGeneration;
	console.log('Mutating ', numMutationsForEach, 'times');

	// The index of the current program in population that we are mutating.
	var currentMutationIndex = 0;

	// The number of successful mutations for this parent.
	var currentMutationSuccessCount = 0;

	while(true) {
		if (population.length > minPopulation) {
			break;
		}

		// Go to next parent if we finish one.
		if (currentMutationSuccessCount >= numMutationsForEach) {
			currentMutationIndex++;
			currentMutationSuccessCount = 0;
		}

		var mutation;

		// Mutate 10 times
		for (var i = 0; i < 10; i++) {
			mutation = mutate(population[currentMutationIndex]);
		}
		var record = scoreAndAddToPopulation(mutation);
		if (record) {
			currentMutationSuccessCount++;
		}
	}
}

function mutate(record) {
	var program = record[0];
	if (Math.random() > 0.5) {
		var pos = random(0, program.length);
		program = program.substr(0, pos) + instructions.randomInstruction() + program.substr(pos - 1);
	} else {
		var pos = random(0, program.length - 1);
		program = program.substr(0, pos) + instructions.randomInstruction() + program.substr(pos);
	}
	return program
}

function runStep() {
	generationCount++;
	pruneLowScores();
	console.log('Generation ' + generationCount);
	console.log('--------------------------------');
	console.log('Top scores:', population)

	mutateAndFillPopulation();

	runStep();
}

generatePopulation();
runStep();
